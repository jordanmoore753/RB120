#### Object Oriented Programming
Object oriented programming was created to compensate for the rising complexity and size of programs. 

Imagine a watch, full of gears, all moving in different directions and at different speeds. Each separate gear has its own function. Without the proper execution of one gear, the whole watch cannot function properly.

Object oriented programming provides a framework by which to design programs that are filled with many small programs that run concurrently. A program that completely encapsulates all of the logic and code into one program runs the risk of one small error creating a ripple effect of compounding errors due to one malfunction or unforeseen bug. 

Object oriented programming focuses on creating containers for data that can be manipulated without affecting the whole program.

**Encapsulation** is the hiding of pieces of functionality and making them unavailable to the rest of the code. This is done on purpose to protect the data from being manipulated without intention.

**Polymorphism** is the ability of data to be represented as many different types. OOP gives programmers flexibility by being able to use pre-written code for multiple purposes.

In **OOP**, the ability of a class to inherit the behaviors of a higher class, known as the **superclass**, is named **inheritance**.

**Superclass** => **Class** => **Sub Class**

**Subclasses** are defined and used for smaller, more detailed functions.

### What Are Objects?
In *Ruby* everything is an object. Objects are created from Classes. 

Think of a *class* as a mold and *object* as the thing made from the mold. 

Remember pottery class? The class is *clay* and the object is *plate*. I can come up with a million more examples but only ones that have to do with pottery.

`'hello world'.class` => `String`

`'hello world'` is the object with the class `String`.

### Classes? What are they good for?
Classes define the attributes of objects. 

Think of classes as the outline for what an object should be and be able to do.

Classes are defined like methods. Don't use the `def` keyword, though. Check the `concepts.rb` file to see this in action.

Name with `CamelCase`.

``````
class GoodDog

end

sparky = GoodDog.new
``````
On line 5, we created an **instance** of the `GoodDog` class and assigned it to the variable `sparky`. This is now an object!

`sparky` is an instance (or object) of the class `GoodDog`.

**Instantiation** is the process of creating a new object or instance from a class.

### Modules
**Modules** are collections of behaviors that are available for use in other classes by use of **mixins**.
**Mixins** make modules possible by invoking the `include` method to 'mix in' the module into a class.

Let's make an example:

``````
module Speak
  def speak(str) # define behaviors in Speak
    puts str 
  end
end

class GoodDog
  include Speak # include method allows use of behavior
end

class Human
  include Speak # include method!
end

sparky = GoodDog.new
sparky.speak('Yo!')
bobby = Human.new
bobby.speak('Ruff!')
``````
I can imagine a WORLD of possibility with these module mixins. It's so much more intuitive to allow certain data types (classes) to use certain methods and disallow it to others. This prevents unwanted data manipulation.

### Method Lookup
You can see the order by which methods are searched for when invoked. You can do this by invoking the `ancestors` method on the class in question.

``````
puts GoodDog.ancestors
=> GoodDog
=> Speak
Object
Kernel
BasicObject
``````
`GoodDog` is a custom class and `Speak` is a module. `Object` is the class that comes built-in with Ruby.

So, first, the lookup chain searches the `GoodDog` class, and then the `Speak` module, and goes from there down the results.

